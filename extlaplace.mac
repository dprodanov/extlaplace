
/**

http://eqworld.ipmnet.ru/en/auxiliary/aux-inttrans.htm


conventions:

	%variables: matching variables, global scope, suffer from side effects
	funcionp: predicate
*/
load("operpart.mac");

protectvars(expr, oper, lst):=block(
	buildq([lst, oper, expr],
		block (lst, apply(oper, expr) )
	)
);

diffp(expr):= inop(expr)=nounify('derivative);

lapsymb:nounify('laplace);

laplacexp (expr):=not freeof(lapsymb, expr);
ilaplacexp (expr):=not freeof('ilt, expr);

noundisp:true;
lispdisp:true;

/*
make sure that the variables are indefinite
*/
kill(%tvar, %lvar);

partbyvar(expr, var):= block([u],
	oppart(expr,  lambda([u], freeof(var, u)))
);

/*
 Laplace transform tweaks
*/
laparrange(expr):=block([xx, tt, ss, l, r, ret, opsubst : true ],
	if inop(expr)="+" then 
		ret:map(laparrange, expr)
	else (		
		if mapatom(expr) then return(expr),
		ret:subst(lapsymb=lambda([xx, tt, ss], 
			([l, r]:oppart(xx, lambda([u], freeof(tt, u))),
				l:subst(nil=1, l),
				r:subst(nil=1, r)
			),
			'laplace(r, tt, ss)*l
			),
		expr
		)
	),
	ret
);



/* Laplace transform manupulations */
lapsymsubst(expr, dvar):=block([xx, tt, ss, ee], 
	subst( lapsymb=lambda([xx, tt, ss], 
			ee:buildq([dvar], depends(dvar, ss)), 
			ev(ee, nouns),
			dvar), 
	expr) 
);	

/* [Pattern matching*/

/* 
nesting of patterns
*/
%matchparams;

predmatch( expr, match):=block([lv, vv, ee],
	lv:propvars(matchdeclare),
	ee:protectvars([expr], match, lv),
	ee:ev(ee, nouns),
	if listp(ee) then (
		for vv in ee do 
			%matchparams[lhs(vv)]:rhs(vv),
		true
	)else  ee
);


matchdeclare( 
	[ %fun, %g ], true, 
	[ %s, %t, %p, %q ], atom 
);

 /*  simple patterns*/
defmatch (lapargs, 'ilt(%fun, %s, %t) );
defmatch (laphypgeo, %f[%p, %q] );
defmatch (lapratio, %g*%s^(-1) );

defmatch (lapratiop, %fun*%s^(-%p) );
defmatch (lapratiop2, %fun/(%s +%q)^(%g) );

defmatch (lapexpp, %fun*%e^(%g) );
defmatch (lapexp1, %fun*%e^(%s*%p) );


/*
patterns with radicals
presumably for bessel functions
*/

defmatch (lapratiosqrt1, %fun*(%s^2 + %p^2)^(-1/2-%q) );
defmatch (lapratiosqrt11, %fun*(%s^2 - %p^2)^(-1/2-%q) );

defmatch (lapsqrt2, %fun*(%s^2 + %p^2)^(1/2) );
defmatch (lapsqrt21, %fun*(%s^2 - %p^2)^(1/2) );

defmatch (lapratiop3, %fun*%s^(%g) );

matchdeclare( 
	%sqp1, lambda([uu], predmatch( uu, lapsqrt2)),
	%sqp11, lambda([uu], predmatch( uu, lapsqrt21)),
	%sqp11, lambda([uu], predmatch( uu, lapsqrt21)),
	%sratio, lambda([uu], predmatch( uu, lapratio)),
	%sratiop, lambda([uu], predmatch( uu, lapratiop)),
	%sratiop2, lambda([uu], predmatch( uu, lapratiop3))
);

defmatch (lapratiosqrt2, %fun*(%sqp1+ %s )^(-%q) ) ;
defmatch (lapratiosqrt21, %fun*(%sqp11+ %s )^(-%q) ) ;

/*
patterns with exponentials
presumably for error functions
delta function, unit step
*/
defmatch (lapexpp, %fun*%e^(%g * sqrt(%s) ));
defmatch (lapexprat,  %fun*%e^(%sratio) ) ;

/*
Mittag-Leffler patterns
*/
defmatch (lapefractee1,  %sratiop2*(%s^%q +%g)^(-1) ) ;
defmatch (lapefractee2,  %sratiop2*(%s^%q +%g)^(-%p) ) ;

ilapargs(expr):= block([ %fun, %s, %t], 
	if lapargs(expr)#false then [ %fun, %s, %t] else false
);

/*  main  ILT functionality*/
ilaplace(expr):=block([l, r:1, fun, ret, %tvar, %lvar],
	if ilaplacexp(expr) then (
		if inop(expr)=nounify('ilt) then (
			ret:ilapargs(expr),
			[fun, %lvar, %tvar]:ilapargs(expr)
		)else (
			[l, r]:oppart(expr, ilaplacexp),
			/*display(l, r),*/
			[fun, %lvar, %tvar]:ilapargs(l)
		),
		display(%lvar, %tvar),	
		ret: r* intablelapfun(fun)
	)
	else ret:expr,
	ret
);


/*
 main table  lookup functionality
*/

intablelapfun(expr):= block([ops: op(expr), ret, u, v, %p, %s, %q, %fun],
	if symbolp(ops) then 
		apply(laptable[ops], args(expr))
	elseif ops="/" then (
		disp(expr),
		if freeof(%e, expr) then 
		/* Bessel functions, case 1*/
		if lapratiosqrt1(expr)#false then (		
			display(%fun, %p, %s ),
			/* bessel_j*/
			if freeof(%lvar, %fun) then (
				if %p#%lvar then ret:laptable["bef2"](%p, %q)
				else ret:laptable["bef2"](%s, %q),
				ret:ret*%fun
				)
			else
				ret:laptable["bef3"](%fun)
		)elseif lapratiosqrt11(expr)#false then (		
			display(%fun, %p, %s ),
			/* bessel_i*/
			if freeof(%lvar, %fun) then (
				if %p#%lvar then ret:laptable["bef21"](%p, %q)
				else ret:laptable["bef21"](%s, %q),
				ret:ret*%fun
				)
			else
				ret:laptable["bef31"](%fun)
		) else	
			ret:laptable["/"](expr)	
		else
			/* Bessel functions, case 2*/
			ret:laptable["bef1"](expr)
		)
	else	ret:laptable[nil],
	ret
);

/*
 lookup table closure
 and  interface pattern
*/
laptable[nil]: lambda([u],   false);

/*
Lookup tables
*/
laptable[arctan]: lambda([u],  
	block([ l, r],
		if hipow(u, %lvar)#-1 then false else (
		[l, r]: partbyvar(u, %lvar),
		1/%tvar *sin (l*%tvar)
		)
	)
);

laptable[log]: lambda([u],  
	block([%a, %b],
		u:first(u),
		if op(u)#"/" then false else (
		%a:num(u)-s,
		%b:denom(u)-s,
		1/%tvar *(exp (%b*%tvar) - exp (%a*%tvar))
		)
	)
);

laptable["bef2"]: lambda([u, v], 
	 if v=-1/2 then false else sqrt(%pi)*%tvar^(v)*bessel_j(v, u*%tvar)/(2*u)^v/gamma(v+1/2) );
laptable["bef21"]: lambda([u, v], 
	 if v=-1/2 then false else sqrt(%pi)*%tvar^(v)*bessel_i(0, u*%tvar)/(2*u)^v/gamma(v+1/2) );

/*   exp -> bessel_j  bessel_i*/

laptable["bef1"]: lambda([u],  
	block([%fun, %p, %s, %g, besselexpand:true ],
		if op(u)#"/" then false else (
		disp(lapexpp(u)),
		%p:-hipow(%fun, %lvar),
		(lapratio(%g)),
		if not freeof(-1, %fun) then
			%g:(-%tvar/%fun)^((%p-1)/2) * bessel_j(%p-1, 2*sqrt(-%fun * %tvar) )
		else
			%g:(%tvar/%fun)^((%p-1)/2) * bessel_i(%p-1, 2*sqrt(%fun * %tvar) ),
		rootscontract(radcan(%g))
		)
	)
);



/* fractional power*/
laptable["/"]: lambda([u],  
	block([%fun, %p, %q, %s, lst],
		if op(u)#"/" then false else (
		disp(lapratiop(u)),
		if laphypgeo(inop(%fun))#false  then (
			laptable["%f[p,q]"] (%fun)
	/*	)elseif (
		*/
		)
		else
		%tvar^(%p-1)/gamma(%p)
		)
	)
);

 
 /*
 hypergeometric
 %f [p,q] ([a],[b],z) 
 */
 
laptable["%f[p,q]"]: lambda([u],  
	block( [ %s, lst, l, %p, %fun ],
		lst:args(u),
		l:rest(lst[1],-1),
		(lapratiop(lst[3])),
		%f[ length(l), length( lst[2]) ](l, lst[2], %tvar^%p)
		)
);


